package com.example.jguzikowski.aidlproductservice;

import android.app.Service;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;


//import com.example.jguzikowski.aidlproductservice.Product;

import com.example.jguzikowski.aidlproductservice.data.ProductContract;
import com.example.jguzikowski.aidlproductservice.data.ProductsDBHelper;

import java.util.ArrayList;
import java.util.List;

import static com.example.jguzikowski.aidlproductservice.data.ProductContract.ProductsEntry.TABLE_NAME;

/**
 * Created by j.guzikowski on 9/19/17.
 */

public class ProductService extends Service {

    private ProductsDBHelper mTaskDbHelper;

    @Override
    public void onCreate() {
        super.onCreate();
   Log.i("TAG", "onCreate()");
    }



    @Override
    public IBinder onBind(Intent intent) {

        Context context = getApplicationContext(); //
        mTaskDbHelper = new ProductsDBHelper(context);

        return new IMyAidlInterface.Stub() { //helper method generated by Android



           public void addProduct(Product p) throws RemoteException {  // our service implementation
                //List<String> phoneList = new ArrayList<String>();
                // populate list above by looking up by name in our phone book database
                //... code here
               final SQLiteDatabase db = mTaskDbHelper.getWritableDatabase();
                // return list of phone numbers corresponding to name parameter
               ContentValues contentValues = new ContentValues();
               contentValues.put(ProductContract.ProductsEntry.COLUMN_NAME,p.getName());
               contentValues.put(ProductContract.ProductsEntry.COLUMN_PRICE,p.getPrice());
               contentValues.put(ProductContract.ProductsEntry.COLUMN_COUNTRY,p.getCountry());
               contentValues.put(ProductContract.ProductsEntry.COLUMN_DELIVERY,p.getDelivery());
               db.insert(TABLE_NAME,null,contentValues);

               Log.d("Dodanie","TAK");

            }

            public void deleteProduct(long id) throws RemoteException {  // our service implementation
                //List<String> phoneList = new ArrayList<String>();
                // populate list above by looking up by name in our phone book database
                //... code here
                final SQLiteDatabase db = mTaskDbHelper.getWritableDatabase();
                // return list of phone numbers corresponding to name parameter

                Log.d("id", String.valueOf(id));
              db.delete(TABLE_NAME,ProductContract.ProductsEntry._ID+"=" + id,null);

            }

            public List<Product> getAllProduct() throws RemoteException{  // our service implementation
                //List<String> phoneList = new ArrayList<String>();
                // populate list above by looking up by name in our phone book database
                //... code here
                List<Product> products = new ArrayList<>();
                Cursor retCursor;

                // return list of phone numbers corresponding to name parameter
                final SQLiteDatabase db = mTaskDbHelper.getWritableDatabase();
           /* retCursor =  db.query(TABLE_NAME,
                        null,
                        selection,
                        selectionArgs,
                        null,
                        null,
                        sortOrder);
*/

                retCursor =  db.query(TABLE_NAME,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null);

                Log.d("ILE", String.valueOf(retCursor.getCount()));
                retCursor.moveToFirst();

                while (!retCursor.isAfterLast()){
                    Product product = new Product();
                    product.setName(retCursor.getString(1));
                    product.setPrice(retCursor.getDouble(2));
                    product.setCountry(retCursor.getString(3));
                    product.setDelivery(retCursor.getString(4));
                    product.setId(retCursor.getLong(0));
                    products.add(product);
                    retCursor.moveToNext();
                }

               // retCursor.close();

                return  products;
            }


        };



    }

    @Override
    public void onDestroy() {
        super.onDestroy();
      Log.d("TAG", "onDestroy()");
    }
}
